/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  InputChangeEventDetail,
  SwitchChangeEventDetail,
  TextFieldTypes,
} from './interfaces';

export namespace Components {
  interface SuiBase {}
  interface SuiBox {
    /**
    * Flex property align-content
    */
    'alignContent': string;
    /**
    * Flex property align-items
    */
    'alignItems': string;
    /**
    * CSS property for background color
    */
    'background': string;
    /**
    * CSS property for borderBottom
    */
    'bb': string | number;
    'bg': string;
    /**
    * CSS property for borderLeft
    */
    'bl': string | number;
    /**
    * CSS property for border
    */
    'border': string | number;
    /**
    * CSS property for borderColor
    */
    'borderColor': string;
    /**
    * CSS property for borderRadius
    */
    'borderRadius': string | number;
    /**
    * CSS property for borderStyle
    */
    'borderStyle': string;
    /**
    * CSS property for borderWidth
    */
    'borderWidth': string | number;
    'bottom': string | number;
    /**
    * CSS property for borderRight
    */
    'br': string | number;
    /**
    * CSS property for borderTop
    */
    'bt': string | number;
    /**
    * CSS property for text color
    */
    'color': string;
    /**
    * CSS property display
    */
    'display': string;
    /**
    * Flex property flex-direction
    */
    'flexDirection': string;
    /**
    * Flex property flex-wrap
    */
    'flexWrap': string;
    /**
    * CSS property for font-family
    */
    'fontFamily': string | string[] | number | number[];
    /**
    * Responsive fontSize
    */
    'fontSize': string | string[] | number | number[];
    /**
    * CSS property for fontWeight
    */
    'fontWeight': string | string[] | number | number[];
    /**
    * Responsive height
    */
    'height': string | string[] | number | number[];
    /**
    * Flex property justify-content
    */
    'justifyContent': string;
    'left': string | number;
    /**
    * CSS property for letterSpacing
    */
    'letterSpacing': string | string[] | number | number[];
    /**
    * CSS property for lineHeight
    */
    'lineHeight': string | string[] | number | number[];
    /**
    * CSS property for responsive margin
    */
    'm': string | string[] | number | number[];
    /**
    * Responsive max-height
    */
    'maxHeight': string | string[] | number | number[];
    /**
    * Responsive max-width
    */
    'maxWidth': string | string[] | number | number[];
    /**
    * Responsive min-height
    */
    'minHeight': string | string[] | number | number[];
    /**
    * Responsive min-width
    */
    'minWidth': string | string[] | number | number[];
    /**
    * CSS property for responsive padding
    */
    'p': string | string[] | number | number[];
    /**
    * CSS property position
    */
    'position': string;
    'right': string | number;
    /**
    * Responsive textAlign
    */
    'textAlign': string | string[] | number | number[];
    /**
    * CSS properties for positioning
    */
    'top': string | number;
    /**
    * Responsive width
    */
    'width': string | string[] | number | number[];
    'zIndex': string | number;
  }
  interface SuiButton {
    /**
    * Flex property align-content
    */
    'alignContent': string;
    /**
    * Flex property align-items
    */
    'alignItems': string;
    /**
    * HTML element to use as basis
    */
    'as': string;
    /**
    * CSS property for background color
    */
    'background': string;
    /**
    * CSS property for borderBottom
    */
    'bb': string | number;
    'bg': string;
    /**
    * CSS property for borderLeft
    */
    'bl': string | number;
    /**
    * CSS property for border
    */
    'border': string | number;
    /**
    * CSS property for borderColor
    */
    'borderColor': string;
    /**
    * CSS property for borderRadius
    */
    'borderRadius': string | number;
    /**
    * CSS property for borderStyle
    */
    'borderStyle': string;
    /**
    * CSS property for borderWidth
    */
    'borderWidth': string | number;
    'bottom': string | number;
    /**
    * CSS property for borderRight
    */
    'br': string | number;
    /**
    * CSS property for borderTop
    */
    'bt': string | number;
    /**
    * CSS property for text color
    */
    'color': string;
    /**
    * Is disabled?
    */
    'disabled': boolean;
    /**
    * CSS property display
    */
    'display': string;
    /**
    * Flex property flex-direction
    */
    'flexDirection': string;
    /**
    * Flex property flex-wrap
    */
    'flexWrap': string;
    /**
    * CSS property for font-family
    */
    'fontFamily': string | string[] | number | number[];
    /**
    * Responsive fontSize
    */
    'fontSize': string | string[] | number | number[];
    /**
    * CSS property for fontWeight
    */
    'fontWeight': string | string[] | number | number[];
    /**
    * Responsive height
    */
    'height': string | string[] | number | number[];
    /**
    * Displays button as link
    */
    'href': string | undefined;
    /**
    * Flex property justify-content
    */
    'justifyContent': string;
    'left': string | number;
    /**
    * CSS property for letterSpacing
    */
    'letterSpacing': string | string[] | number | number[];
    /**
    * CSS property for lineHeight
    */
    'lineHeight': string | string[] | number | number[];
    'm': string | string[] | number | number[];
    /**
    * CSS property for responsive margin
    */
    'margin': string | string[] | number | number[];
    /**
    * Responsive max-height
    */
    'maxHeight': string | string[] | number | number[];
    /**
    * Responsive max-width
    */
    'maxWidth': string | string[] | number | number[];
    /**
    * Responsive min-height
    */
    'minHeight': string | string[] | number | number[];
    /**
    * Responsive min-width
    */
    'minWidth': string | string[] | number | number[];
    'p': string | string[] | number | number[];
    /**
    * CSS property for responsive padding
    */
    'padding': string | string[] | number | number[];
    /**
    * CSS property position
    */
    'position': string;
    'right': string | number;
    /**
    * Specifies where to display the linked URL. Only applies when an `href` is provided. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
    */
    'target': string | undefined;
    /**
    * Sets button content to this text
    */
    'text': string | undefined;
    /**
    * Responsive textAlign
    */
    'textAlign': string | string[] | number | number[];
    /**
    * CSS properties for positioning
    */
    'top': string | number;
    /**
    * The button or input type (usually submit)
    */
    'type': "submit" | "reset" | "button";
    /**
    * Optional prop for input to show text
    */
    'value': string;
    /**
    * Responsive width
    */
    'width': string | string[] | number | number[];
    'zIndex': string | number;
  }
  interface SuiInput {
    /**
    * If the value of the type attribute is `"file"`, then this attribute will indicate the types of files that the server accepts, otherwise it will be ignored. The value must be a comma-separated list of unique content type specifiers.
    */
    'accept'?: string;
    /**
    * Flex property align-content
    */
    'alignContent': string;
    /**
    * Flex property align-items
    */
    'alignItems': string;
    /**
    * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.
    */
    'autocapitalize': string;
    /**
    * Indicates whether the value of the control can be automatically completed by the browser.
    */
    'autocomplete': "on" | "off";
    /**
    * Whether auto correction should be enabled when the user is entering/editing the text value.
    */
    'autocorrect': "on" | "off";
    /**
    * This Boolean attribute lets you specify that a form control should have input focus when the page loads.
    */
    'autofocus': boolean;
    /**
    * CSS property for background color
    */
    'background': string;
    /**
    * CSS property for borderBottom
    */
    'bb': string | number;
    'bg': string;
    /**
    * CSS property for borderLeft
    */
    'bl': string | number;
    /**
    * CSS property for border
    */
    'border': string | number;
    /**
    * CSS property for borderColor
    */
    'borderColor': string;
    /**
    * CSS property for borderRadius
    */
    'borderRadius': string | number;
    /**
    * CSS property for borderStyle
    */
    'borderStyle': string;
    /**
    * CSS property for borderWidth
    */
    'borderWidth': string | number;
    'bottom': string | number;
    /**
    * CSS property for borderRight
    */
    'br': string | number;
    /**
    * CSS property for borderTop
    */
    'bt': string | number;
    /**
    * CSS property for text color
    */
    'color': string;
    /**
    * If `true`, the user cannot interact with the input.
    */
    'disabled': boolean;
    /**
    * CSS property display
    */
    'display': string;
    /**
    * Flex property flex-direction
    */
    'flexDirection': string;
    /**
    * Flex property flex-wrap
    */
    'flexWrap': string;
    /**
    * CSS property for font-family
    */
    'fontFamily': string | string[] | number | number[];
    /**
    * Responsive fontSize
    */
    'fontSize': string | string[] | number | number[];
    /**
    * CSS property for fontWeight
    */
    'fontWeight': string | string[] | number | number[];
    /**
    * Returns the native `<input>` element used under the hood.
    */
    'getInputElement': () => Promise<HTMLInputElement>;
    /**
    * Responsive height
    */
    'height': string | string[] | number | number[];
    /**
    * A hint to the browser for which keyboard to display. Possible values: `"none"`, `"text"`, `"tel"`, `"url"`, `"email"`, `"numeric"`, `"decimal"`, and `"search"`.
    */
    'inputmode'?: | "none"
    | "text"
    | "tel"
    | "url"
    | "email"
    | "numeric"
    | "decimal"
    | "search";
    /**
    * Flex property justify-content
    */
    'justifyContent': string;
    'left': string | number;
    /**
    * CSS property for letterSpacing
    */
    'letterSpacing': string | string[] | number | number[];
    /**
    * CSS property for lineHeight
    */
    'lineHeight': string | string[] | number | number[];
    'm': string | string[] | number | number[];
    /**
    * CSS property for responsive margin
    */
    'margin': string | string[] | number | number[];
    /**
    * The maximum value, which must not be less than its minimum (min attribute) value.
    */
    'max'?: string;
    /**
    * Responsive max-height
    */
    'maxHeight': string | string[] | number | number[];
    /**
    * Responsive max-width
    */
    'maxWidth': string | string[] | number | number[];
    /**
    * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.
    */
    'maxlength'?: number;
    /**
    * The minimum value, which must not be greater than its maximum (max attribute) value.
    */
    'min'?: string;
    /**
    * Responsive min-height
    */
    'minHeight': string | string[] | number | number[];
    /**
    * Responsive min-width
    */
    'minWidth': string | string[] | number | number[];
    /**
    * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.
    */
    'minlength'?: number;
    /**
    * If `true`, the user can enter more than one value. This attribute applies when the type attribute is set to `"email"` or `"file"`, otherwise it is ignored.
    */
    'multiple'?: boolean;
    /**
    * The name of the control, which is submitted with the form data.
    */
    'name': string;
    'p': string | string[] | number | number[];
    /**
    * CSS property for responsive padding
    */
    'padding': string | string[] | number | number[];
    /**
    * A regular expression that the value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value of the type attribute is `"text"`, `"search"`, `"tel"`, `"url"`, `"email"`, or `"password"`, otherwise it is ignored.
    */
    'pattern'?: string;
    /**
    * Instructional text that shows before the input has a value.
    */
    'placeholder'?: string | null;
    /**
    * CSS property position
    */
    'position': string;
    /**
    * If `true`, the user cannot modify the value.
    */
    'readonly': boolean;
    /**
    * If `true`, the user must fill in a value before submitting a form.
    */
    'required': boolean;
    'right': string | number;
    /**
    * Sets focus on the specified `ion-input`. Use this method instead of the global `input.focus()`.
    */
    'setFocus': () => Promise<void>;
    /**
    * The initial size of the control. This value is in pixels unless the value of the type attribute is `"text"` or `"password"`, in which case it is an integer number of characters. This attribute applies only when the `type` attribute is set to `"text"`, `"search"`, `"tel"`, `"url"`, `"email"`, or `"password"`, otherwise it is ignored.
    */
    'size'?: number;
    /**
    * If `true`, the element will have its spelling and grammar checked.
    */
    'spellcheck': boolean;
    /**
    * Works with the min and max attributes to limit the increments at which a value can be set. Possible values are: `"any"` or a positive floating point number.
    */
    'step'?: string;
    /**
    * Responsive textAlign
    */
    'textAlign': string | string[] | number | number[];
    /**
    * CSS properties for positioning
    */
    'top': string | number;
    /**
    * The type of control to display. The default type is text.
    */
    'type': TextFieldTypes;
    /**
    * The value of the input.
    */
    'value'?: string | number | null;
    /**
    * Responsive width
    */
    'width': string | string[] | number | number[];
    'zIndex': string | number;
  }
  interface SuiLink {
    /**
    * Flex property align-content
    */
    'alignContent': string;
    /**
    * Flex property align-items
    */
    'alignItems': string;
    /**
    * HTML element to use as basis
    */
    'as': string;
    /**
    * CSS property for background color
    */
    'background': string;
    /**
    * CSS property for borderBottom
    */
    'bb': string | number;
    'bg': string;
    /**
    * CSS property for borderLeft
    */
    'bl': string | number;
    /**
    * CSS property for border
    */
    'border': string | number;
    /**
    * CSS property for borderColor
    */
    'borderColor': string;
    /**
    * CSS property for borderRadius
    */
    'borderRadius': string | number;
    /**
    * CSS property for borderStyle
    */
    'borderStyle': string;
    /**
    * CSS property for borderWidth
    */
    'borderWidth': string | number;
    'bottom': string | number;
    /**
    * CSS property for borderRight
    */
    'br': string | number;
    /**
    * CSS property for borderTop
    */
    'bt': string | number;
    /**
    * CSS property for text color
    */
    'color': string;
    /**
    * Is disabled?
    */
    'disabled': boolean;
    /**
    * CSS property display
    */
    'display': string;
    /**
    * Flex property flex-direction
    */
    'flexDirection': string;
    /**
    * Flex property flex-wrap
    */
    'flexWrap': string;
    /**
    * CSS property for font-family
    */
    'fontFamily': string | string[] | number | number[];
    /**
    * Responsive fontSize
    */
    'fontSize': string | string[] | number | number[];
    /**
    * CSS property for fontWeight
    */
    'fontWeight': string | string[] | number | number[];
    /**
    * Responsive height
    */
    'height': string | string[] | number | number[];
    /**
    * Displays link as link
    */
    'href': string | undefined;
    /**
    * Flex property justify-content
    */
    'justifyContent': string;
    'left': string | number;
    /**
    * CSS property for letterSpacing
    */
    'letterSpacing': string | string[] | number | number[];
    /**
    * CSS property for lineHeight
    */
    'lineHeight': string | string[] | number | number[];
    'm': string | string[] | number | number[];
    /**
    * CSS property for responsive margin
    */
    'margin': string | string[] | number | number[];
    /**
    * Responsive max-height
    */
    'maxHeight': string | string[] | number | number[];
    /**
    * Responsive max-width
    */
    'maxWidth': string | string[] | number | number[];
    /**
    * Responsive min-height
    */
    'minHeight': string | string[] | number | number[];
    /**
    * Responsive min-width
    */
    'minWidth': string | string[] | number | number[];
    'p': string | string[] | number | number[];
    /**
    * CSS property for responsive padding
    */
    'padding': string | string[] | number | number[];
    /**
    * CSS property position
    */
    'position': string;
    'right': string | number;
    /**
    * Specifies where to display the linked URL. Only applies when an `href` is provided. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
    */
    'target': string | undefined;
    /**
    * Sets link content to this text
    */
    'text': string | undefined;
    /**
    * Responsive textAlign
    */
    'textAlign': string | string[] | number | number[];
    /**
    * CSS properties for positioning
    */
    'top': string | number;
    /**
    * Responsive width
    */
    'width': string | string[] | number | number[];
    'zIndex': string | number;
  }
  interface SuiSelect {
    /**
    * HTML element to use as basis
    */
    'as': string;
    /**
    * Automatically sets focus to dropdown
    */
    'autofocus'?: boolean;
    /**
    * CSS property for background color
    */
    'background': string;
    /**
    * CSS property for borderBottom
    */
    'bb': string | number;
    'bg': string;
    /**
    * CSS property for borderLeft
    */
    'bl': string | number;
    /**
    * CSS property for border
    */
    'border': string | number;
    /**
    * CSS property for borderColor
    */
    'borderColor': string;
    /**
    * CSS property for borderRadius
    */
    'borderRadius': string | number;
    /**
    * CSS property for borderStyle
    */
    'borderStyle': string;
    /**
    * CSS property for borderWidth
    */
    'borderWidth': string | number;
    'bottom': string | number;
    /**
    * CSS property for borderRight
    */
    'br': string | number;
    /**
    * CSS property for borderTop
    */
    'bt': string | number;
    /**
    * CSS property for text color
    */
    'color': string;
    /**
    * Is disabled?
    */
    'disabled'?: boolean;
    /**
    * CSS property display
    */
    'display': string;
    /**
    * CSS property for font-family
    */
    'fontFamily': string | string[] | number | number[];
    /**
    * Responsive fontSize
    */
    'fontSize': string | string[] | number | number[];
    /**
    * CSS property for fontWeight
    */
    'fontWeight': string | string[] | number | number[];
    /**
    * Form ID that dropdown belongs to
    */
    'form'?: string;
    /**
    * Responsive height
    */
    'height': string | string[] | number | number[];
    'left': string | number;
    /**
    * CSS property for letterSpacing
    */
    'letterSpacing': string | string[] | number | number[];
    /**
    * CSS property for lineHeight
    */
    'lineHeight': string | string[] | number | number[];
    'm': string | string[] | number | number[];
    /**
    * CSS property for responsive margin
    */
    'margin': string | string[] | number | number[];
    /**
    * Responsive max-height
    */
    'maxHeight': string | string[] | number | number[];
    /**
    * Responsive max-width
    */
    'maxWidth': string | string[] | number | number[];
    /**
    * Responsive min-height
    */
    'minHeight': string | string[] | number | number[];
    /**
    * Responsive min-width
    */
    'minWidth': string | string[] | number | number[];
    /**
    * Allows multiple options to be selected at once
    */
    'multiple'?: boolean;
    /**
    * The name of the dropdown
    */
    'name'?: string;
    'p': string | string[] | number | number[];
    /**
    * CSS property for responsive padding
    */
    'padding': string | string[] | number | number[];
    /**
    * CSS property position
    */
    'position': string;
    /**
    * Sets dropdown as a required field
    */
    'required'?: boolean;
    'right': string | number;
    /**
    * Number of visible options
    */
    'size'?: number;
    /**
    * Responsive textAlign
    */
    'textAlign': string | string[] | number | number[];
    /**
    * CSS properties for positioning
    */
    'top': string | number;
    /**
    * Responsive width
    */
    'width': string | string[] | number | number[];
    'zIndex': string | number;
  }
  interface SuiSwitch {
    /**
    * The value of the input.
    */
    'checked': boolean;
    /**
    * If true, disables the checked toggle using internal onClick. For use with other state management solutions.
    */
    'external': boolean;
    /**
    * Returns the native `<input>` element used under the hood.
    */
    'getInputElement': () => Promise<HTMLInputElement>;
    /**
    * The name of the control, which is submitted with the form data.
    */
    'name': string;
    /**
    * Sets focus on the specified `ion-input`. Use this method instead of the global `input.focus()`.
    */
    'setFocus': () => Promise<void>;
  }
  interface SuiText {
    /**
    * Flex property align-content
    */
    'alignContent': string;
    /**
    * Flex property align-items
    */
    'alignItems': string;
    /**
    * HTML element to use as basis
    */
    'as'?: string;
    /**
    * CSS property for background color
    */
    'background': string;
    /**
    * CSS property for borderBottom
    */
    'bb': string | number;
    'bg': string;
    /**
    * CSS property for borderLeft
    */
    'bl': string | number;
    /**
    * CSS property for border
    */
    'border': string | number;
    /**
    * CSS property for borderColor
    */
    'borderColor': string;
    /**
    * CSS property for borderRadius
    */
    'borderRadius': string | number;
    /**
    * CSS property for borderStyle
    */
    'borderStyle': string;
    /**
    * CSS property for borderWidth
    */
    'borderWidth': string | number;
    'bottom': string | number;
    /**
    * CSS property for borderRight
    */
    'br': string | number;
    /**
    * CSS property for borderTop
    */
    'bt': string | number;
    /**
    * CSS property for text color
    */
    'color': string;
    /**
    * CSS property display
    */
    'display': string;
    /**
    * Flex property flex-direction
    */
    'flexDirection': string;
    /**
    * Flex property flex-wrap
    */
    'flexWrap': string;
    /**
    * CSS property for font-family
    */
    'fontFamily': string | string[] | number | number[];
    /**
    * Responsive fontSize
    */
    'fontSize': string | string[] | number | number[];
    /**
    * CSS property for fontWeight
    */
    'fontWeight': string | string[] | number | number[];
    /**
    * Responsive height
    */
    'height': string | string[] | number | number[];
    /**
    * Flex property justify-content
    */
    'justifyContent': string;
    'left': string | number;
    /**
    * CSS property for letterSpacing
    */
    'letterSpacing': string | string[] | number | number[];
    /**
    * CSS property for lineHeight
    */
    'lineHeight': string | string[] | number | number[];
    'm': string | string[] | number | number[];
    /**
    * CSS property for responsive margin
    */
    'margin': string | string[] | number | number[];
    /**
    * Responsive max-height
    */
    'maxHeight': string | string[] | number | number[];
    /**
    * Responsive max-width
    */
    'maxWidth': string | string[] | number | number[];
    /**
    * Responsive min-height
    */
    'minHeight': string | string[] | number | number[];
    /**
    * Responsive min-width
    */
    'minWidth': string | string[] | number | number[];
    'p': string | string[] | number | number[];
    /**
    * CSS property for responsive padding
    */
    'padding': string | string[] | number | number[];
    /**
    * CSS property position
    */
    'position': string;
    'right': string | number;
    /**
    * Sets component content to this text. Alternative to slots.
    */
    'text': string | undefined;
    /**
    * Responsive textAlign
    */
    'textAlign': string | string[] | number | number[];
    /**
    * CSS properties for positioning
    */
    'top': string | number;
    /**
    * Responsive width
    */
    'width': string | string[] | number | number[];
    'zIndex': string | number;
  }
  interface SuiTextarea {
    /**
    * Automatically sets focus to textarea
    */
    'autofocus'?: boolean;
    /**
    * CSS property for background color
    */
    'background': string;
    /**
    * CSS property for borderBottom
    */
    'bb': string | number;
    'bg': string;
    /**
    * CSS property for borderLeft
    */
    'bl': string | number;
    /**
    * CSS property for border
    */
    'border': string | number;
    /**
    * CSS property for borderColor
    */
    'borderColor': string;
    /**
    * CSS property for borderRadius
    */
    'borderRadius': string | number;
    /**
    * CSS property for borderStyle
    */
    'borderStyle': string;
    /**
    * CSS property for borderWidth
    */
    'borderWidth': string | number;
    'bottom': string | number;
    /**
    * CSS property for borderRight
    */
    'br': string | number;
    /**
    * CSS property for borderTop
    */
    'bt': string | number;
    /**
    * CSS property for text color
    */
    'color': string;
    /**
    * Visible width of a text area
    */
    'cols'?: number;
    /**
    * Is disabled?
    */
    'disabled'?: boolean;
    /**
    * CSS property display
    */
    'display': string;
    /**
    * CSS property for font-family
    */
    'fontFamily': string | string[] | number | number[];
    /**
    * Responsive fontSize
    */
    'fontSize': string | string[] | number | number[];
    /**
    * CSS property for fontWeight
    */
    'fontWeight': string | string[] | number | number[];
    /**
    * Form ID that dropdown belongs to
    */
    'form'?: string;
    /**
    * Responsive height
    */
    'height': string | string[] | number | number[];
    'left': string | number;
    /**
    * CSS property for letterSpacing
    */
    'letterSpacing': string | string[] | number | number[];
    /**
    * CSS property for lineHeight
    */
    'lineHeight': string | string[] | number | number[];
    'm': string | string[] | number | number[];
    /**
    * CSS property for responsive margin
    */
    'margin': string | string[] | number | number[];
    /**
    * Responsive max-height
    */
    'maxHeight': string | string[] | number | number[];
    /**
    * Responsive max-width
    */
    'maxWidth': string | string[] | number | number[];
    /**
    * Responsive min-height
    */
    'minHeight': string | string[] | number | number[];
    /**
    * Responsive min-width
    */
    'minWidth': string | string[] | number | number[];
    /**
    * The name of the textarea
    */
    'name'?: string;
    'p': string | string[] | number | number[];
    /**
    * CSS property for responsive padding
    */
    'padding': string | string[] | number | number[];
    /**
    * Instructional text that shows before the textarea has a value.
    */
    'placeholder'?: string;
    /**
    * CSS property position
    */
    'position': string;
    /**
    * Sets dropdown as a readonly field
    */
    'readonly'?: boolean;
    /**
    * Sets dropdown as a required field
    */
    'required'?: boolean;
    'right': string | number;
    /**
    * The visible number of lines in a text area
    */
    'rows'?: number;
    /**
    * Text to display inside textarea
    */
    'text'?: string;
    /**
    * Responsive textAlign
    */
    'textAlign': string | string[] | number | number[];
    /**
    * CSS properties for positioning
    */
    'top': string | number;
    /**
    * Responsive width
    */
    'width': string | string[] | number | number[];
    /**
    * Add newlines to your form submission (soft by default)
    */
    'wrap'?: "hard" | "soft";
    'zIndex': string | number;
  }
}

declare global {


  interface HTMLSuiBaseElement extends Components.SuiBase, HTMLStencilElement {}
  var HTMLSuiBaseElement: {
    prototype: HTMLSuiBaseElement;
    new (): HTMLSuiBaseElement;
  };

  interface HTMLSuiBoxElement extends Components.SuiBox, HTMLStencilElement {}
  var HTMLSuiBoxElement: {
    prototype: HTMLSuiBoxElement;
    new (): HTMLSuiBoxElement;
  };

  interface HTMLSuiButtonElement extends Components.SuiButton, HTMLStencilElement {}
  var HTMLSuiButtonElement: {
    prototype: HTMLSuiButtonElement;
    new (): HTMLSuiButtonElement;
  };

  interface HTMLSuiInputElement extends Components.SuiInput, HTMLStencilElement {}
  var HTMLSuiInputElement: {
    prototype: HTMLSuiInputElement;
    new (): HTMLSuiInputElement;
  };

  interface HTMLSuiLinkElement extends Components.SuiLink, HTMLStencilElement {}
  var HTMLSuiLinkElement: {
    prototype: HTMLSuiLinkElement;
    new (): HTMLSuiLinkElement;
  };

  interface HTMLSuiSelectElement extends Components.SuiSelect, HTMLStencilElement {}
  var HTMLSuiSelectElement: {
    prototype: HTMLSuiSelectElement;
    new (): HTMLSuiSelectElement;
  };

  interface HTMLSuiSwitchElement extends Components.SuiSwitch, HTMLStencilElement {}
  var HTMLSuiSwitchElement: {
    prototype: HTMLSuiSwitchElement;
    new (): HTMLSuiSwitchElement;
  };

  interface HTMLSuiTextElement extends Components.SuiText, HTMLStencilElement {}
  var HTMLSuiTextElement: {
    prototype: HTMLSuiTextElement;
    new (): HTMLSuiTextElement;
  };

  interface HTMLSuiTextareaElement extends Components.SuiTextarea, HTMLStencilElement {}
  var HTMLSuiTextareaElement: {
    prototype: HTMLSuiTextareaElement;
    new (): HTMLSuiTextareaElement;
  };
  interface HTMLElementTagNameMap {
    'sui-base': HTMLSuiBaseElement;
    'sui-box': HTMLSuiBoxElement;
    'sui-button': HTMLSuiButtonElement;
    'sui-input': HTMLSuiInputElement;
    'sui-link': HTMLSuiLinkElement;
    'sui-select': HTMLSuiSelectElement;
    'sui-switch': HTMLSuiSwitchElement;
    'sui-text': HTMLSuiTextElement;
    'sui-textarea': HTMLSuiTextareaElement;
  }
}

declare namespace LocalJSX {
  interface SuiBase {}
  interface SuiBox {
    /**
    * Flex property align-content
    */
    'alignContent'?: string;
    /**
    * Flex property align-items
    */
    'alignItems'?: string;
    /**
    * CSS property for background color
    */
    'background'?: string;
    /**
    * CSS property for borderBottom
    */
    'bb'?: string | number;
    'bg'?: string;
    /**
    * CSS property for borderLeft
    */
    'bl'?: string | number;
    /**
    * CSS property for border
    */
    'border'?: string | number;
    /**
    * CSS property for borderColor
    */
    'borderColor'?: string;
    /**
    * CSS property for borderRadius
    */
    'borderRadius'?: string | number;
    /**
    * CSS property for borderStyle
    */
    'borderStyle'?: string;
    /**
    * CSS property for borderWidth
    */
    'borderWidth'?: string | number;
    'bottom'?: string | number;
    /**
    * CSS property for borderRight
    */
    'br'?: string | number;
    /**
    * CSS property for borderTop
    */
    'bt'?: string | number;
    /**
    * CSS property for text color
    */
    'color'?: string;
    /**
    * CSS property display
    */
    'display'?: string;
    /**
    * Flex property flex-direction
    */
    'flexDirection'?: string;
    /**
    * Flex property flex-wrap
    */
    'flexWrap'?: string;
    /**
    * CSS property for font-family
    */
    'fontFamily'?: string | string[] | number | number[];
    /**
    * Responsive fontSize
    */
    'fontSize'?: string | string[] | number | number[];
    /**
    * CSS property for fontWeight
    */
    'fontWeight'?: string | string[] | number | number[];
    /**
    * Responsive height
    */
    'height'?: string | string[] | number | number[];
    /**
    * Flex property justify-content
    */
    'justifyContent'?: string;
    'left'?: string | number;
    /**
    * CSS property for letterSpacing
    */
    'letterSpacing'?: string | string[] | number | number[];
    /**
    * CSS property for lineHeight
    */
    'lineHeight'?: string | string[] | number | number[];
    /**
    * CSS property for responsive margin
    */
    'm'?: string | string[] | number | number[];
    /**
    * Responsive max-height
    */
    'maxHeight'?: string | string[] | number | number[];
    /**
    * Responsive max-width
    */
    'maxWidth'?: string | string[] | number | number[];
    /**
    * Responsive min-height
    */
    'minHeight'?: string | string[] | number | number[];
    /**
    * Responsive min-width
    */
    'minWidth'?: string | string[] | number | number[];
    /**
    * CSS property for responsive padding
    */
    'p'?: string | string[] | number | number[];
    /**
    * CSS property position
    */
    'position'?: string;
    'right'?: string | number;
    /**
    * Responsive textAlign
    */
    'textAlign'?: string | string[] | number | number[];
    /**
    * CSS properties for positioning
    */
    'top'?: string | number;
    /**
    * Responsive width
    */
    'width'?: string | string[] | number | number[];
    'zIndex'?: string | number;
  }
  interface SuiButton {
    /**
    * Flex property align-content
    */
    'alignContent'?: string;
    /**
    * Flex property align-items
    */
    'alignItems'?: string;
    /**
    * HTML element to use as basis
    */
    'as'?: string;
    /**
    * CSS property for background color
    */
    'background'?: string;
    /**
    * CSS property for borderBottom
    */
    'bb'?: string | number;
    'bg'?: string;
    /**
    * CSS property for borderLeft
    */
    'bl'?: string | number;
    /**
    * CSS property for border
    */
    'border'?: string | number;
    /**
    * CSS property for borderColor
    */
    'borderColor'?: string;
    /**
    * CSS property for borderRadius
    */
    'borderRadius'?: string | number;
    /**
    * CSS property for borderStyle
    */
    'borderStyle'?: string;
    /**
    * CSS property for borderWidth
    */
    'borderWidth'?: string | number;
    'bottom'?: string | number;
    /**
    * CSS property for borderRight
    */
    'br'?: string | number;
    /**
    * CSS property for borderTop
    */
    'bt'?: string | number;
    /**
    * CSS property for text color
    */
    'color'?: string;
    /**
    * Is disabled?
    */
    'disabled'?: boolean;
    /**
    * CSS property display
    */
    'display'?: string;
    /**
    * Flex property flex-direction
    */
    'flexDirection'?: string;
    /**
    * Flex property flex-wrap
    */
    'flexWrap'?: string;
    /**
    * CSS property for font-family
    */
    'fontFamily'?: string | string[] | number | number[];
    /**
    * Responsive fontSize
    */
    'fontSize'?: string | string[] | number | number[];
    /**
    * CSS property for fontWeight
    */
    'fontWeight'?: string | string[] | number | number[];
    /**
    * Responsive height
    */
    'height'?: string | string[] | number | number[];
    /**
    * Displays button as link
    */
    'href'?: string | undefined;
    /**
    * Flex property justify-content
    */
    'justifyContent'?: string;
    'left'?: string | number;
    /**
    * CSS property for letterSpacing
    */
    'letterSpacing'?: string | string[] | number | number[];
    /**
    * CSS property for lineHeight
    */
    'lineHeight'?: string | string[] | number | number[];
    'm'?: string | string[] | number | number[];
    /**
    * CSS property for responsive margin
    */
    'margin'?: string | string[] | number | number[];
    /**
    * Responsive max-height
    */
    'maxHeight'?: string | string[] | number | number[];
    /**
    * Responsive max-width
    */
    'maxWidth'?: string | string[] | number | number[];
    /**
    * Responsive min-height
    */
    'minHeight'?: string | string[] | number | number[];
    /**
    * Responsive min-width
    */
    'minWidth'?: string | string[] | number | number[];
    'p'?: string | string[] | number | number[];
    /**
    * CSS property for responsive padding
    */
    'padding'?: string | string[] | number | number[];
    /**
    * CSS property position
    */
    'position'?: string;
    'right'?: string | number;
    /**
    * Specifies where to display the linked URL. Only applies when an `href` is provided. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
    */
    'target'?: string | undefined;
    /**
    * Sets button content to this text
    */
    'text'?: string | undefined;
    /**
    * Responsive textAlign
    */
    'textAlign'?: string | string[] | number | number[];
    /**
    * CSS properties for positioning
    */
    'top'?: string | number;
    /**
    * The button or input type (usually submit)
    */
    'type'?: "submit" | "reset" | "button";
    /**
    * Optional prop for input to show text
    */
    'value'?: string;
    /**
    * Responsive width
    */
    'width'?: string | string[] | number | number[];
    'zIndex'?: string | number;
  }
  interface SuiInput {
    /**
    * If the value of the type attribute is `"file"`, then this attribute will indicate the types of files that the server accepts, otherwise it will be ignored. The value must be a comma-separated list of unique content type specifiers.
    */
    'accept'?: string;
    /**
    * Flex property align-content
    */
    'alignContent'?: string;
    /**
    * Flex property align-items
    */
    'alignItems'?: string;
    /**
    * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.
    */
    'autocapitalize'?: string;
    /**
    * Indicates whether the value of the control can be automatically completed by the browser.
    */
    'autocomplete'?: "on" | "off";
    /**
    * Whether auto correction should be enabled when the user is entering/editing the text value.
    */
    'autocorrect'?: "on" | "off";
    /**
    * This Boolean attribute lets you specify that a form control should have input focus when the page loads.
    */
    'autofocus'?: boolean;
    /**
    * CSS property for background color
    */
    'background'?: string;
    /**
    * CSS property for borderBottom
    */
    'bb'?: string | number;
    'bg'?: string;
    /**
    * CSS property for borderLeft
    */
    'bl'?: string | number;
    /**
    * CSS property for border
    */
    'border'?: string | number;
    /**
    * CSS property for borderColor
    */
    'borderColor'?: string;
    /**
    * CSS property for borderRadius
    */
    'borderRadius'?: string | number;
    /**
    * CSS property for borderStyle
    */
    'borderStyle'?: string;
    /**
    * CSS property for borderWidth
    */
    'borderWidth'?: string | number;
    'bottom'?: string | number;
    /**
    * CSS property for borderRight
    */
    'br'?: string | number;
    /**
    * CSS property for borderTop
    */
    'bt'?: string | number;
    /**
    * CSS property for text color
    */
    'color'?: string;
    /**
    * If `true`, the user cannot interact with the input.
    */
    'disabled'?: boolean;
    /**
    * CSS property display
    */
    'display'?: string;
    /**
    * Flex property flex-direction
    */
    'flexDirection'?: string;
    /**
    * Flex property flex-wrap
    */
    'flexWrap'?: string;
    /**
    * CSS property for font-family
    */
    'fontFamily'?: string | string[] | number | number[];
    /**
    * Responsive fontSize
    */
    'fontSize'?: string | string[] | number | number[];
    /**
    * CSS property for fontWeight
    */
    'fontWeight'?: string | string[] | number | number[];
    /**
    * Responsive height
    */
    'height'?: string | string[] | number | number[];
    /**
    * A hint to the browser for which keyboard to display. Possible values: `"none"`, `"text"`, `"tel"`, `"url"`, `"email"`, `"numeric"`, `"decimal"`, and `"search"`.
    */
    'inputmode'?: | "none"
    | "text"
    | "tel"
    | "url"
    | "email"
    | "numeric"
    | "decimal"
    | "search";
    /**
    * Flex property justify-content
    */
    'justifyContent'?: string;
    'left'?: string | number;
    /**
    * CSS property for letterSpacing
    */
    'letterSpacing'?: string | string[] | number | number[];
    /**
    * CSS property for lineHeight
    */
    'lineHeight'?: string | string[] | number | number[];
    'm'?: string | string[] | number | number[];
    /**
    * CSS property for responsive margin
    */
    'margin'?: string | string[] | number | number[];
    /**
    * The maximum value, which must not be less than its minimum (min attribute) value.
    */
    'max'?: string;
    /**
    * Responsive max-height
    */
    'maxHeight'?: string | string[] | number | number[];
    /**
    * Responsive max-width
    */
    'maxWidth'?: string | string[] | number | number[];
    /**
    * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.
    */
    'maxlength'?: number;
    /**
    * The minimum value, which must not be greater than its maximum (max attribute) value.
    */
    'min'?: string;
    /**
    * Responsive min-height
    */
    'minHeight'?: string | string[] | number | number[];
    /**
    * Responsive min-width
    */
    'minWidth'?: string | string[] | number | number[];
    /**
    * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.
    */
    'minlength'?: number;
    /**
    * If `true`, the user can enter more than one value. This attribute applies when the type attribute is set to `"email"` or `"file"`, otherwise it is ignored.
    */
    'multiple'?: boolean;
    /**
    * The name of the control, which is submitted with the form data.
    */
    'name'?: string;
    /**
    * Emitted when the value has changed.
    */
    'onSuiChanged'?: (event: CustomEvent<InputChangeEventDetail>) => void;
    /**
    * Emitted when a keyboard input occurred.
    */
    'onSuiInput'?: (event: CustomEvent<KeyboardEvent>) => void;
    'p'?: string | string[] | number | number[];
    /**
    * CSS property for responsive padding
    */
    'padding'?: string | string[] | number | number[];
    /**
    * A regular expression that the value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value of the type attribute is `"text"`, `"search"`, `"tel"`, `"url"`, `"email"`, or `"password"`, otherwise it is ignored.
    */
    'pattern'?: string;
    /**
    * Instructional text that shows before the input has a value.
    */
    'placeholder'?: string | null;
    /**
    * CSS property position
    */
    'position'?: string;
    /**
    * If `true`, the user cannot modify the value.
    */
    'readonly'?: boolean;
    /**
    * If `true`, the user must fill in a value before submitting a form.
    */
    'required'?: boolean;
    'right'?: string | number;
    /**
    * The initial size of the control. This value is in pixels unless the value of the type attribute is `"text"` or `"password"`, in which case it is an integer number of characters. This attribute applies only when the `type` attribute is set to `"text"`, `"search"`, `"tel"`, `"url"`, `"email"`, or `"password"`, otherwise it is ignored.
    */
    'size'?: number;
    /**
    * If `true`, the element will have its spelling and grammar checked.
    */
    'spellcheck'?: boolean;
    /**
    * Works with the min and max attributes to limit the increments at which a value can be set. Possible values are: `"any"` or a positive floating point number.
    */
    'step'?: string;
    /**
    * Responsive textAlign
    */
    'textAlign'?: string | string[] | number | number[];
    /**
    * CSS properties for positioning
    */
    'top'?: string | number;
    /**
    * The type of control to display. The default type is text.
    */
    'type'?: TextFieldTypes;
    /**
    * The value of the input.
    */
    'value'?: string | number | null;
    /**
    * Responsive width
    */
    'width'?: string | string[] | number | number[];
    'zIndex'?: string | number;
  }
  interface SuiLink {
    /**
    * Flex property align-content
    */
    'alignContent'?: string;
    /**
    * Flex property align-items
    */
    'alignItems'?: string;
    /**
    * HTML element to use as basis
    */
    'as'?: string;
    /**
    * CSS property for background color
    */
    'background'?: string;
    /**
    * CSS property for borderBottom
    */
    'bb'?: string | number;
    'bg'?: string;
    /**
    * CSS property for borderLeft
    */
    'bl'?: string | number;
    /**
    * CSS property for border
    */
    'border'?: string | number;
    /**
    * CSS property for borderColor
    */
    'borderColor'?: string;
    /**
    * CSS property for borderRadius
    */
    'borderRadius'?: string | number;
    /**
    * CSS property for borderStyle
    */
    'borderStyle'?: string;
    /**
    * CSS property for borderWidth
    */
    'borderWidth'?: string | number;
    'bottom'?: string | number;
    /**
    * CSS property for borderRight
    */
    'br'?: string | number;
    /**
    * CSS property for borderTop
    */
    'bt'?: string | number;
    /**
    * CSS property for text color
    */
    'color'?: string;
    /**
    * Is disabled?
    */
    'disabled'?: boolean;
    /**
    * CSS property display
    */
    'display'?: string;
    /**
    * Flex property flex-direction
    */
    'flexDirection'?: string;
    /**
    * Flex property flex-wrap
    */
    'flexWrap'?: string;
    /**
    * CSS property for font-family
    */
    'fontFamily'?: string | string[] | number | number[];
    /**
    * Responsive fontSize
    */
    'fontSize'?: string | string[] | number | number[];
    /**
    * CSS property for fontWeight
    */
    'fontWeight'?: string | string[] | number | number[];
    /**
    * Responsive height
    */
    'height'?: string | string[] | number | number[];
    /**
    * Displays link as link
    */
    'href'?: string | undefined;
    /**
    * Flex property justify-content
    */
    'justifyContent'?: string;
    'left'?: string | number;
    /**
    * CSS property for letterSpacing
    */
    'letterSpacing'?: string | string[] | number | number[];
    /**
    * CSS property for lineHeight
    */
    'lineHeight'?: string | string[] | number | number[];
    'm'?: string | string[] | number | number[];
    /**
    * CSS property for responsive margin
    */
    'margin'?: string | string[] | number | number[];
    /**
    * Responsive max-height
    */
    'maxHeight'?: string | string[] | number | number[];
    /**
    * Responsive max-width
    */
    'maxWidth'?: string | string[] | number | number[];
    /**
    * Responsive min-height
    */
    'minHeight'?: string | string[] | number | number[];
    /**
    * Responsive min-width
    */
    'minWidth'?: string | string[] | number | number[];
    'p'?: string | string[] | number | number[];
    /**
    * CSS property for responsive padding
    */
    'padding'?: string | string[] | number | number[];
    /**
    * CSS property position
    */
    'position'?: string;
    'right'?: string | number;
    /**
    * Specifies where to display the linked URL. Only applies when an `href` is provided. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
    */
    'target'?: string | undefined;
    /**
    * Sets link content to this text
    */
    'text'?: string | undefined;
    /**
    * Responsive textAlign
    */
    'textAlign'?: string | string[] | number | number[];
    /**
    * CSS properties for positioning
    */
    'top'?: string | number;
    /**
    * Responsive width
    */
    'width'?: string | string[] | number | number[];
    'zIndex'?: string | number;
  }
  interface SuiSelect {
    /**
    * HTML element to use as basis
    */
    'as'?: string;
    /**
    * Automatically sets focus to dropdown
    */
    'autofocus'?: boolean;
    /**
    * CSS property for background color
    */
    'background'?: string;
    /**
    * CSS property for borderBottom
    */
    'bb'?: string | number;
    'bg'?: string;
    /**
    * CSS property for borderLeft
    */
    'bl'?: string | number;
    /**
    * CSS property for border
    */
    'border'?: string | number;
    /**
    * CSS property for borderColor
    */
    'borderColor'?: string;
    /**
    * CSS property for borderRadius
    */
    'borderRadius'?: string | number;
    /**
    * CSS property for borderStyle
    */
    'borderStyle'?: string;
    /**
    * CSS property for borderWidth
    */
    'borderWidth'?: string | number;
    'bottom'?: string | number;
    /**
    * CSS property for borderRight
    */
    'br'?: string | number;
    /**
    * CSS property for borderTop
    */
    'bt'?: string | number;
    /**
    * CSS property for text color
    */
    'color'?: string;
    /**
    * Is disabled?
    */
    'disabled'?: boolean;
    /**
    * CSS property display
    */
    'display'?: string;
    /**
    * CSS property for font-family
    */
    'fontFamily'?: string | string[] | number | number[];
    /**
    * Responsive fontSize
    */
    'fontSize'?: string | string[] | number | number[];
    /**
    * CSS property for fontWeight
    */
    'fontWeight'?: string | string[] | number | number[];
    /**
    * Form ID that dropdown belongs to
    */
    'form'?: string;
    /**
    * Responsive height
    */
    'height'?: string | string[] | number | number[];
    'left'?: string | number;
    /**
    * CSS property for letterSpacing
    */
    'letterSpacing'?: string | string[] | number | number[];
    /**
    * CSS property for lineHeight
    */
    'lineHeight'?: string | string[] | number | number[];
    'm'?: string | string[] | number | number[];
    /**
    * CSS property for responsive margin
    */
    'margin'?: string | string[] | number | number[];
    /**
    * Responsive max-height
    */
    'maxHeight'?: string | string[] | number | number[];
    /**
    * Responsive max-width
    */
    'maxWidth'?: string | string[] | number | number[];
    /**
    * Responsive min-height
    */
    'minHeight'?: string | string[] | number | number[];
    /**
    * Responsive min-width
    */
    'minWidth'?: string | string[] | number | number[];
    /**
    * Allows multiple options to be selected at once
    */
    'multiple'?: boolean;
    /**
    * The name of the dropdown
    */
    'name'?: string;
    'p'?: string | string[] | number | number[];
    /**
    * CSS property for responsive padding
    */
    'padding'?: string | string[] | number | number[];
    /**
    * CSS property position
    */
    'position'?: string;
    /**
    * Sets dropdown as a required field
    */
    'required'?: boolean;
    'right'?: string | number;
    /**
    * Number of visible options
    */
    'size'?: number;
    /**
    * Responsive textAlign
    */
    'textAlign'?: string | string[] | number | number[];
    /**
    * CSS properties for positioning
    */
    'top'?: string | number;
    /**
    * Responsive width
    */
    'width'?: string | string[] | number | number[];
    'zIndex'?: string | number;
  }
  interface SuiSwitch {
    /**
    * The value of the input.
    */
    'checked'?: boolean;
    /**
    * If true, disables the checked toggle using internal onClick. For use with other state management solutions.
    */
    'external'?: boolean;
    /**
    * The name of the control, which is submitted with the form data.
    */
    'name'?: string;
    /**
    * Emitted when the value has changed.
    */
    'onSuiChanged'?: (event: CustomEvent<SwitchChangeEventDetail>) => void;
  }
  interface SuiText {
    /**
    * Flex property align-content
    */
    'alignContent'?: string;
    /**
    * Flex property align-items
    */
    'alignItems'?: string;
    /**
    * HTML element to use as basis
    */
    'as'?: string;
    /**
    * CSS property for background color
    */
    'background'?: string;
    /**
    * CSS property for borderBottom
    */
    'bb'?: string | number;
    'bg'?: string;
    /**
    * CSS property for borderLeft
    */
    'bl'?: string | number;
    /**
    * CSS property for border
    */
    'border'?: string | number;
    /**
    * CSS property for borderColor
    */
    'borderColor'?: string;
    /**
    * CSS property for borderRadius
    */
    'borderRadius'?: string | number;
    /**
    * CSS property for borderStyle
    */
    'borderStyle'?: string;
    /**
    * CSS property for borderWidth
    */
    'borderWidth'?: string | number;
    'bottom'?: string | number;
    /**
    * CSS property for borderRight
    */
    'br'?: string | number;
    /**
    * CSS property for borderTop
    */
    'bt'?: string | number;
    /**
    * CSS property for text color
    */
    'color'?: string;
    /**
    * CSS property display
    */
    'display'?: string;
    /**
    * Flex property flex-direction
    */
    'flexDirection'?: string;
    /**
    * Flex property flex-wrap
    */
    'flexWrap'?: string;
    /**
    * CSS property for font-family
    */
    'fontFamily'?: string | string[] | number | number[];
    /**
    * Responsive fontSize
    */
    'fontSize'?: string | string[] | number | number[];
    /**
    * CSS property for fontWeight
    */
    'fontWeight'?: string | string[] | number | number[];
    /**
    * Responsive height
    */
    'height'?: string | string[] | number | number[];
    /**
    * Flex property justify-content
    */
    'justifyContent'?: string;
    'left'?: string | number;
    /**
    * CSS property for letterSpacing
    */
    'letterSpacing'?: string | string[] | number | number[];
    /**
    * CSS property for lineHeight
    */
    'lineHeight'?: string | string[] | number | number[];
    'm'?: string | string[] | number | number[];
    /**
    * CSS property for responsive margin
    */
    'margin'?: string | string[] | number | number[];
    /**
    * Responsive max-height
    */
    'maxHeight'?: string | string[] | number | number[];
    /**
    * Responsive max-width
    */
    'maxWidth'?: string | string[] | number | number[];
    /**
    * Responsive min-height
    */
    'minHeight'?: string | string[] | number | number[];
    /**
    * Responsive min-width
    */
    'minWidth'?: string | string[] | number | number[];
    'p'?: string | string[] | number | number[];
    /**
    * CSS property for responsive padding
    */
    'padding'?: string | string[] | number | number[];
    /**
    * CSS property position
    */
    'position'?: string;
    'right'?: string | number;
    /**
    * Sets component content to this text. Alternative to slots.
    */
    'text'?: string | undefined;
    /**
    * Responsive textAlign
    */
    'textAlign'?: string | string[] | number | number[];
    /**
    * CSS properties for positioning
    */
    'top'?: string | number;
    /**
    * Responsive width
    */
    'width'?: string | string[] | number | number[];
    'zIndex'?: string | number;
  }
  interface SuiTextarea {
    /**
    * Automatically sets focus to textarea
    */
    'autofocus'?: boolean;
    /**
    * CSS property for background color
    */
    'background'?: string;
    /**
    * CSS property for borderBottom
    */
    'bb'?: string | number;
    'bg'?: string;
    /**
    * CSS property for borderLeft
    */
    'bl'?: string | number;
    /**
    * CSS property for border
    */
    'border'?: string | number;
    /**
    * CSS property for borderColor
    */
    'borderColor'?: string;
    /**
    * CSS property for borderRadius
    */
    'borderRadius'?: string | number;
    /**
    * CSS property for borderStyle
    */
    'borderStyle'?: string;
    /**
    * CSS property for borderWidth
    */
    'borderWidth'?: string | number;
    'bottom'?: string | number;
    /**
    * CSS property for borderRight
    */
    'br'?: string | number;
    /**
    * CSS property for borderTop
    */
    'bt'?: string | number;
    /**
    * CSS property for text color
    */
    'color'?: string;
    /**
    * Visible width of a text area
    */
    'cols'?: number;
    /**
    * Is disabled?
    */
    'disabled'?: boolean;
    /**
    * CSS property display
    */
    'display'?: string;
    /**
    * CSS property for font-family
    */
    'fontFamily'?: string | string[] | number | number[];
    /**
    * Responsive fontSize
    */
    'fontSize'?: string | string[] | number | number[];
    /**
    * CSS property for fontWeight
    */
    'fontWeight'?: string | string[] | number | number[];
    /**
    * Form ID that dropdown belongs to
    */
    'form'?: string;
    /**
    * Responsive height
    */
    'height'?: string | string[] | number | number[];
    'left'?: string | number;
    /**
    * CSS property for letterSpacing
    */
    'letterSpacing'?: string | string[] | number | number[];
    /**
    * CSS property for lineHeight
    */
    'lineHeight'?: string | string[] | number | number[];
    'm'?: string | string[] | number | number[];
    /**
    * CSS property for responsive margin
    */
    'margin'?: string | string[] | number | number[];
    /**
    * Responsive max-height
    */
    'maxHeight'?: string | string[] | number | number[];
    /**
    * Responsive max-width
    */
    'maxWidth'?: string | string[] | number | number[];
    /**
    * Responsive min-height
    */
    'minHeight'?: string | string[] | number | number[];
    /**
    * Responsive min-width
    */
    'minWidth'?: string | string[] | number | number[];
    /**
    * The name of the textarea
    */
    'name'?: string;
    'p'?: string | string[] | number | number[];
    /**
    * CSS property for responsive padding
    */
    'padding'?: string | string[] | number | number[];
    /**
    * Instructional text that shows before the textarea has a value.
    */
    'placeholder'?: string;
    /**
    * CSS property position
    */
    'position'?: string;
    /**
    * Sets dropdown as a readonly field
    */
    'readonly'?: boolean;
    /**
    * Sets dropdown as a required field
    */
    'required'?: boolean;
    'right'?: string | number;
    /**
    * The visible number of lines in a text area
    */
    'rows'?: number;
    /**
    * Text to display inside textarea
    */
    'text'?: string;
    /**
    * Responsive textAlign
    */
    'textAlign'?: string | string[] | number | number[];
    /**
    * CSS properties for positioning
    */
    'top'?: string | number;
    /**
    * Responsive width
    */
    'width'?: string | string[] | number | number[];
    /**
    * Add newlines to your form submission (soft by default)
    */
    'wrap'?: "hard" | "soft";
    'zIndex'?: string | number;
  }

  interface IntrinsicElements {
    'sui-base': SuiBase;
    'sui-box': SuiBox;
    'sui-button': SuiButton;
    'sui-input': SuiInput;
    'sui-link': SuiLink;
    'sui-select': SuiSelect;
    'sui-switch': SuiSwitch;
    'sui-text': SuiText;
    'sui-textarea': SuiTextarea;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'sui-base': LocalJSX.SuiBase & JSXBase.HTMLAttributes<HTMLSuiBaseElement>;
      'sui-box': LocalJSX.SuiBox & JSXBase.HTMLAttributes<HTMLSuiBoxElement>;
      'sui-button': LocalJSX.SuiButton & JSXBase.HTMLAttributes<HTMLSuiButtonElement>;
      'sui-input': LocalJSX.SuiInput & JSXBase.HTMLAttributes<HTMLSuiInputElement>;
      'sui-link': LocalJSX.SuiLink & JSXBase.HTMLAttributes<HTMLSuiLinkElement>;
      'sui-select': LocalJSX.SuiSelect & JSXBase.HTMLAttributes<HTMLSuiSelectElement>;
      'sui-switch': LocalJSX.SuiSwitch & JSXBase.HTMLAttributes<HTMLSuiSwitchElement>;
      'sui-text': LocalJSX.SuiText & JSXBase.HTMLAttributes<HTMLSuiTextElement>;
      'sui-textarea': LocalJSX.SuiTextarea & JSXBase.HTMLAttributes<HTMLSuiTextareaElement>;
    }
  }
}


