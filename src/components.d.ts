/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';


export namespace Components {
  interface MyComponent {
    /**
    * The first name
    */
    'first': string;
    /**
    * The last name
    */
    'last': string;
    /**
    * The middle name
    */
    'middle': string;
  }
  interface SuiBase {}
  interface SuiBox {
    /**
    * Flex property align-content
    */
    'alignContent': string;
    /**
    * Flex property align-items
    */
    'alignItems': string;
    /**
    * CSS property for background color
    */
    'background': string;
    'bg': string;
    /**
    * CSS property for border
    */
    'border': string | number;
    /**
    * CSS property for borderBottom
    */
    'borderBottom': string | number;
    /**
    * CSS property for borderColor
    */
    'borderColor': string;
    /**
    * CSS property for borderLeft
    */
    'borderLeft': string | number;
    /**
    * CSS property for borderRadius
    */
    'borderRadius': string | number;
    /**
    * CSS property for borderRight
    */
    'borderRight': string | number;
    /**
    * CSS property for borderStyle
    */
    'borderStyle': string;
    /**
    * CSS property for borderTop
    */
    'borderTop': string | number;
    /**
    * CSS property for borderWidth
    */
    'borderWidth': string | number;
    'bottom': string | number;
    /**
    * CSS property for text color
    */
    'color': string;
    /**
    * CSS property display
    */
    'display': string;
    /**
    * Flex property flex-direction
    */
    'flexDirection': string;
    /**
    * Flex property flex-wrap
    */
    'flexWrap': string;
    /**
    * Responsive fontSize
    */
    'fontSize': string | string[] | number | number[];
    /**
    * CSS property for fontWeight
    */
    'fontWeight': string | string[] | number | number[];
    /**
    * Responsive height
    */
    'height': string | string[] | number | number[];
    /**
    * Flex property justify-content
    */
    'justifyContent': string;
    'left': string | number;
    /**
    * CSS property for letterSpacing
    */
    'letterSpacing': string | string[] | number | number[];
    /**
    * CSS property for lineHeight
    */
    'lineHeight': string | string[] | number | number[];
    'm': string | string[] | number | number[];
    /**
    * CSS property for responsive margin
    */
    'margin': string | string[] | number | number[];
    /**
    * Responsive max-height
    */
    'maxHeight': string | string[] | number | number[];
    /**
    * Responsive max-width
    */
    'maxWidth': string | string[] | number | number[];
    /**
    * Responsive min-height
    */
    'minHeight': string | string[] | number | number[];
    /**
    * Responsive min-width
    */
    'minWidth': string | string[] | number | number[];
    'p': string | string[] | number | number[];
    /**
    * CSS property for responsive padding
    */
    'padding': string | string[] | number | number[];
    /**
    * CSS property position
    */
    'position': string;
    'right': string | number;
    /**
    * Responsive textAlign
    */
    'textAlign': string | string[] | number | number[];
    /**
    * CSS properties for positioning
    */
    'top': string | number;
    /**
    * Responsive width
    */
    'width': string | string[] | number | number[];
  }
  interface SuiButton {
    /**
    * HTML element to use as basis
    */
    'as': string;
    /**
    * Background color
    */
    'color': string;
    /**
    * Is disabled?
    */
    'disabled': boolean;
    /**
    * Displays button as link
    */
    'href': string | undefined;
    /**
    * Specifies where to display the linked URL. Only applies when an `href` is provided. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
    */
    'target': string | undefined;
    /**
    * Sets button content to this text
    */
    'text': string | undefined;
    /**
    * The button or input type (usually submit)
    */
    'type': "submit" | "reset" | "button";
    /**
    * Optional prop for input to show text
    */
    'value': string;
  }
}

declare global {


  interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {}
  var HTMLMyComponentElement: {
    prototype: HTMLMyComponentElement;
    new (): HTMLMyComponentElement;
  };

  interface HTMLSuiBaseElement extends Components.SuiBase, HTMLStencilElement {}
  var HTMLSuiBaseElement: {
    prototype: HTMLSuiBaseElement;
    new (): HTMLSuiBaseElement;
  };

  interface HTMLSuiBoxElement extends Components.SuiBox, HTMLStencilElement {}
  var HTMLSuiBoxElement: {
    prototype: HTMLSuiBoxElement;
    new (): HTMLSuiBoxElement;
  };

  interface HTMLSuiButtonElement extends Components.SuiButton, HTMLStencilElement {}
  var HTMLSuiButtonElement: {
    prototype: HTMLSuiButtonElement;
    new (): HTMLSuiButtonElement;
  };
  interface HTMLElementTagNameMap {
    'my-component': HTMLMyComponentElement;
    'sui-base': HTMLSuiBaseElement;
    'sui-box': HTMLSuiBoxElement;
    'sui-button': HTMLSuiButtonElement;
  }
}

declare namespace LocalJSX {
  interface MyComponent {
    /**
    * The first name
    */
    'first'?: string;
    /**
    * The last name
    */
    'last'?: string;
    /**
    * The middle name
    */
    'middle'?: string;
  }
  interface SuiBase {}
  interface SuiBox {
    /**
    * Flex property align-content
    */
    'alignContent'?: string;
    /**
    * Flex property align-items
    */
    'alignItems'?: string;
    /**
    * CSS property for background color
    */
    'background'?: string;
    'bg'?: string;
    /**
    * CSS property for border
    */
    'border'?: string | number;
    /**
    * CSS property for borderBottom
    */
    'borderBottom'?: string | number;
    /**
    * CSS property for borderColor
    */
    'borderColor'?: string;
    /**
    * CSS property for borderLeft
    */
    'borderLeft'?: string | number;
    /**
    * CSS property for borderRadius
    */
    'borderRadius'?: string | number;
    /**
    * CSS property for borderRight
    */
    'borderRight'?: string | number;
    /**
    * CSS property for borderStyle
    */
    'borderStyle'?: string;
    /**
    * CSS property for borderTop
    */
    'borderTop'?: string | number;
    /**
    * CSS property for borderWidth
    */
    'borderWidth'?: string | number;
    'bottom'?: string | number;
    /**
    * CSS property for text color
    */
    'color'?: string;
    /**
    * CSS property display
    */
    'display'?: string;
    /**
    * Flex property flex-direction
    */
    'flexDirection'?: string;
    /**
    * Flex property flex-wrap
    */
    'flexWrap'?: string;
    /**
    * Responsive fontSize
    */
    'fontSize'?: string | string[] | number | number[];
    /**
    * CSS property for fontWeight
    */
    'fontWeight'?: string | string[] | number | number[];
    /**
    * Responsive height
    */
    'height'?: string | string[] | number | number[];
    /**
    * Flex property justify-content
    */
    'justifyContent'?: string;
    'left'?: string | number;
    /**
    * CSS property for letterSpacing
    */
    'letterSpacing'?: string | string[] | number | number[];
    /**
    * CSS property for lineHeight
    */
    'lineHeight'?: string | string[] | number | number[];
    'm'?: string | string[] | number | number[];
    /**
    * CSS property for responsive margin
    */
    'margin'?: string | string[] | number | number[];
    /**
    * Responsive max-height
    */
    'maxHeight'?: string | string[] | number | number[];
    /**
    * Responsive max-width
    */
    'maxWidth'?: string | string[] | number | number[];
    /**
    * Responsive min-height
    */
    'minHeight'?: string | string[] | number | number[];
    /**
    * Responsive min-width
    */
    'minWidth'?: string | string[] | number | number[];
    'p'?: string | string[] | number | number[];
    /**
    * CSS property for responsive padding
    */
    'padding'?: string | string[] | number | number[];
    /**
    * CSS property position
    */
    'position'?: string;
    'right'?: string | number;
    /**
    * Responsive textAlign
    */
    'textAlign'?: string | string[] | number | number[];
    /**
    * CSS properties for positioning
    */
    'top'?: string | number;
    /**
    * Responsive width
    */
    'width'?: string | string[] | number | number[];
  }
  interface SuiButton {
    /**
    * HTML element to use as basis
    */
    'as'?: string;
    /**
    * Background color
    */
    'color'?: string;
    /**
    * Is disabled?
    */
    'disabled'?: boolean;
    /**
    * Displays button as link
    */
    'href'?: string | undefined;
    /**
    * Specifies where to display the linked URL. Only applies when an `href` is provided. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
    */
    'target'?: string | undefined;
    /**
    * Sets button content to this text
    */
    'text'?: string | undefined;
    /**
    * The button or input type (usually submit)
    */
    'type'?: "submit" | "reset" | "button";
    /**
    * Optional prop for input to show text
    */
    'value'?: string;
  }

  interface IntrinsicElements {
    'my-component': MyComponent;
    'sui-base': SuiBase;
    'sui-box': SuiBox;
    'sui-button': SuiButton;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'my-component': LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
      'sui-base': LocalJSX.SuiBase & JSXBase.HTMLAttributes<HTMLSuiBaseElement>;
      'sui-box': LocalJSX.SuiBox & JSXBase.HTMLAttributes<HTMLSuiBoxElement>;
      'sui-button': LocalJSX.SuiButton & JSXBase.HTMLAttributes<HTMLSuiButtonElement>;
    }
  }
}


